package com.viettridao.cafe.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.viettridao.cafe.common.TableStatus;
import com.viettridao.cafe.dto.request.sales.CreateReservationRequest;
import com.viettridao.cafe.dto.request.sales.CreateSelectMenuRequest;
import com.viettridao.cafe.dto.request.sales.MergeTableRequest;
import com.viettridao.cafe.dto.request.sales.SplitTableRequest;
import com.viettridao.cafe.dto.response.sales.OrderDetailRessponse;
import com.viettridao.cafe.mapper.OrderDetailMapper;
import com.viettridao.cafe.model.AccountEntity;
import com.viettridao.cafe.repository.AccountRepository;
import com.viettridao.cafe.repository.InvoiceDetailRepository;
import com.viettridao.cafe.repository.TableRepository;
import com.viettridao.cafe.service.ReservationService;
import com.viettridao.cafe.service.SelectMenuService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

/**
 * ================================================================================================
 * SALES CONTROLLER - QU·∫¢N L√ù B√ÅN H√ÄNG V√Ä C√ÅC CH·ª®C NƒÇNG B√ÄN
 * ================================================================================================
 * 
 * Controller n√†y x·ª≠ l√Ω t·∫•t c·∫£ c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn qu·∫£n l√Ω b√†n v√† b√°n
 * h√†ng:
 * 
 * üìã DANH S√ÅCH CH·ª®C NƒÇNG CH√çNH:
 * ‚îú‚îÄ‚îÄ 1. Hi·ªÉn th·ªã danh s√°ch b√†n v√† tr·∫°ng th√°i
 * ‚îú‚îÄ‚îÄ 2. ƒê·∫∑t b√†n (reservation) - ch·ªâ √°p d·ª•ng cho b√†n AVAILABLE
 * ‚îú‚îÄ‚îÄ 3. Ch·ªçn th·ª±c ƒë∆°n - √°p d·ª•ng cho b√†n AVAILABLE, RESERVED, OCCUPIED
 * ‚îú‚îÄ‚îÄ 4. Xem chi ti·∫øt b√†n - hi·ªÉn th·ªã th√¥ng tin order v√† invoice
 * ‚îú‚îÄ‚îÄ 5. H·ªßy b√†n - ch·ªâ √°p d·ª•ng cho b√†n RESERVED
 * ‚îú‚îÄ‚îÄ 6. G·ªôp b√†n - g·ªôp nhi·ªÅu b√†n OCCUPIED th√†nh 1 b√†n
 * ‚îî‚îÄ‚îÄ 7. T√°ch b√†n - t√°ch m·ªôt ph·∫ßn m√≥n t·ª´ b√†n OCCUPIED sang b√†n kh√°c
 * 
 * üîÑ WORKFLOW TR·∫†NG TH√ÅI B√ÄN:
 * AVAILABLE ‚Üí RESERVED (ƒë·∫∑t b√†n) ‚Üí OCCUPIED (ch·ªçn m√≥n) ‚Üí AVAILABLE (thanh to√°n)
 * 
 * üìù QUY T·∫ÆC NGHI·ªÜP V·ª§:
 * - M·ªói b√†n ch·ªâ c√≥ 1 reservation active t·∫°i 1 th·ªùi ƒëi·ªÉm
 * - M·ªói reservation t∆∞∆°ng ·ª©ng v·ªõi 1 invoice
 * - M·ªôt invoice c√≥ nhi·ªÅu invoice details (chi ti·∫øt m√≥n)
 * - Ch·ªâ c√≥ th·ªÉ g·ªôp/t√°ch b√†n khi b√†n ƒëang OCCUPIED
 * 
 * ‚ö° PERFORMANCE NOTES:
 * - S·ª≠ d·ª•ng @Transactional trong service layer ƒë·ªÉ ƒë·∫£m b·∫£o data consistency
 * - Validate c·∫£ frontend (JavaScript) v√† backend (Spring Validation)
 * - Error handling to√†n di·ªán v·ªõi user-friendly messages
 * 
 * ================================================================================================
 */
@Controller
@RequiredArgsConstructor
@RequestMapping("/sale")
public class SalesController {

    // ================================================================================================
    // DEPENDENCY INJECTION - C√ÅC SERVICE V√Ä REPOSITORY C·∫¶N THI·∫æT
    // ================================================================================================

    /** Repository qu·∫£n l√Ω th√¥ng tin b√†n v√† tr·∫°ng th√°i */
    private final TableRepository tableRepository;

    /** Service x·ª≠ l√Ω logic ƒë·∫∑t b√†n, g·ªôp b√†n, t√°ch b√†n */
    private final ReservationService reservationService;

    /** Repository qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n v√† nh√¢n vi√™n */
    private final AccountRepository accountRepository;

    /** Service x·ª≠ l√Ω logic ch·ªçn th·ª±c ƒë∆°n v√† t·∫°o order */
    private final SelectMenuService selectMenuService;

    /** Repository qu·∫£n l√Ω chi ti·∫øt h√≥a ƒë∆°n (invoice details) */
    private final InvoiceDetailRepository invoiceDetailRepository;

    /** Mapper chuy·ªÉn ƒë·ªïi entity sang DTO response */
    private final OrderDetailMapper orderDetailMapper;

    // ================================================================================================
    // CH·ª®C NƒÇNG 1: CH·ªåN TH·ª∞C ƒê∆†N (SELECT MENU)
    // ================================================================================================

    /**
     * üìã HI·ªÇN TH·ªä TRANG CH·ªåN TH·ª∞C ƒê∆íN RI√äNG BI·ªÜT (Kh√¥ng s·ª≠ d·ª•ng trong flow ch√≠nh)
     * 
     * Endpoint: GET /sale/select-menu?tableId={id}
     * 
     * üéØ M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã trang ch·ªçn th·ª±c ƒë∆°n ri√™ng bi·ªát (kh√¥ng ph·∫£i popup)
     * 
     * üìã Quy tr√¨nh:
     * 1. Validate tableId c√≥ t·ªìn t·∫°i kh√¥ng
     * 2. T·∫°o SelectMenuRequest v·ªõi tableId
     * 3. Truy·ªÅn data cho view select_menu.html
     * 
     * ‚ö†Ô∏è L∆∞u √Ω: Method n√†y √≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng, ch·ªß y·∫øu d√πng showSelectMenuForm()
     */
    @GetMapping("/select-menu")
    public String getSelectMenuPage(@RequestParam Integer tableId, Model model) {
        // B∆Ø·ªöC 1: Validate v√† l·∫•y th√¥ng tin b√†n
        var table = tableRepository.findById(tableId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + tableId));

        // B∆Ø·ªöC 2: T·∫°o request object m·∫∑c ƒë·ªãnh cho form binding
        CreateSelectMenuRequest selectMenuRequest = new CreateSelectMenuRequest();
        selectMenuRequest.setTableId(tableId);

        // B∆Ø·ªöC 3: Truy·ªÅn data cho view template
        model.addAttribute("table", table);
        model.addAttribute("selectMenuRequest", selectMenuRequest);

        // B∆Ø·ªöC 4: Tr·∫£ v·ªÅ trang ch·ªçn th·ª±c ƒë∆°n ri√™ng bi·ªát
        return "sales/select_menu";
    }

    /**
     * üéØ HI·ªÇN TH·ªä FORM CH·ªåN TH·ª∞C ƒê∆íN TRONG POPUP (Flow ch√≠nh)
     * 
     * Endpoint: GET /sale/show-select-menu-form?tableId={id}
     * 
     * üéØ M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã form ch·ªçn th·ª±c ƒë∆°n d·∫°ng popup trong trang sales.html
     * 
     * üìã Quy tr√¨nh:
     * 1. Validate tableId v√† l·∫•y th√¥ng tin b√†n
     * 2. T·∫°o SelectMenuRequest v·ªõi tableId v√† kh·ªüi t·∫°o items list
     * 3. N·∫øu b√†n ƒë√£ c√≥ reservation (RESERVED/OCCUPIED) ‚Üí load th√¥ng tin kh√°ch h√†ng
     * 4. L·∫•y danh s√°ch menu items t·ª´ service
     * 5. Set flag showSelectMenuForm = true ƒë·ªÉ hi·ªÉn th·ªã popup
     * 6. Tr·∫£ v·ªÅ sales.html v·ªõi popup hi·ªÉn th·ªã
     * 
     * üîÑ Tr·∫°ng th√°i b√†n h·ªó tr·ª£: AVAILABLE, RESERVED, OCCUPIED
     * 
     * ‚ö° Performance: S·ª≠ d·ª•ng try-catch ƒë·ªÉ handle tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y
     * reservation
     */
    @GetMapping("/show-select-menu-form")
    public String showSelectMenuForm(@RequestParam Integer tableId, Model model) {
        // B∆Ø·ªöC 1: Validate v√† l·∫•y th√¥ng tin b√†n
        var table = tableRepository.findById(tableId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + tableId));

        // B∆Ø·ªöC 2: Kh·ªüi t·∫°o request object cho form binding
        CreateSelectMenuRequest selectMenuRequest = new CreateSelectMenuRequest();
        selectMenuRequest.setTableId(tableId);
        selectMenuRequest.setItems(new ArrayList<>()); // Kh·ªüi t·∫°o list ƒë·ªÉ tr√°nh null pointer

        // B∆Ø·ªöC 3: Load th√¥ng tin kh√°ch h√†ng n·∫øu b√†n ƒë√£ c√≥ reservation
        if (table.getStatus().name().equals("RESERVED") || table.getStatus().name().equals("OCCUPIED")) {
            try {
                var reservation = reservationService.findCurrentReservationByTableId(tableId);
                if (reservation != null) {
                    // Pre-fill th√¥ng tin kh√°ch h√†ng t·ª´ reservation hi·ªán t·∫°i
                    selectMenuRequest.setCustomerName(reservation.getCustomerName());
                    selectMenuRequest.setCustomerPhone(reservation.getCustomerPhone());
                }
            } catch (Exception e) {
                // Kh√¥ng c√≥ reservation ho·∫∑c l·ªói ‚Üí ƒë·ªÉ tr·ªëng ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th·ªß c√¥ng
                // Log error nh∆∞ng kh√¥ng throw exception ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n flow
            }
        }

        // B∆Ø·ªöC 4: L·∫•y danh s√°ch menu items t·ª´ service
        var menuItems = selectMenuService.getMenuItems();

        // B∆Ø·ªöC 5: Chu·∫©n b·ªã data cho view - hi·ªÉn th·ªã popup trong sales.html
        model.addAttribute("tables", tableRepository.findAll()); // Danh s√°ch t·∫•t c·∫£ b√†n
        model.addAttribute("selectMenuRequest", selectMenuRequest); // Form request object
        model.addAttribute("selectedTable", table); // B√†n ƒëang ƒë∆∞·ª£c ch·ªçn
        model.addAttribute("showSelectMenuForm", true); // Flag hi·ªÉn th·ªã popup
        model.addAttribute("menuItems", menuItems); // Danh s√°ch menu items

        // B∆Ø·ªöC 6: Tr·∫£ v·ªÅ trang sales v·ªõi popup ch·ªçn th·ª±c ƒë∆°n
        return "sales/sales";
    }

    /**
     * üíæ X·ª¨ L√ù SUBMIT FORM CH·ªåN TH·ª∞C ƒê∆íN (Core Business Logic)
     * 
     * Endpoint: POST /sale/select-menu-on-sales
     * 
     * üéØ M·ª•c ƒë√≠ch: X·ª≠ l√Ω submit form ch·ªçn th·ª±c ƒë∆°n v·ªõi validation v√† business logic
     * 
     * üìã Quy tr√¨nh x·ª≠ l√Ω:
     * 1. VALIDATION LAYER 1: Spring Framework Validation (@Valid annotation)
     * 2. VALIDATION LAYER 2: Business Rules Validation
     * - N·∫øu b√†n AVAILABLE ‚Üí b·∫Øt bu·ªôc nh·∫≠p th√¥ng tin kh√°ch h√†ng
     * - B·∫Øt bu·ªôc ch·ªçn √≠t nh·∫•t 1 m√≥n c√≥ s·ªë l∆∞·ª£ng > 0
     * 3. SECURITY: L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ Security Context
     * 4. BUSINESS LOGIC: G·ªçi service t·∫°o order
     * 5. SUCCESS: Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng + order details
     * 6. ERROR: Tr·∫£ v·ªÅ form v·ªõi th√¥ng b√°o l·ªói c·ª• th·ªÉ
     * 
     * üîÑ Tr·∫°ng th√°i b√†n x·ª≠ l√Ω:
     * - AVAILABLE ‚Üí T·∫°o m·ªõi reservation + invoice + order
     * - RESERVED ‚Üí C·∫≠p nh·∫≠t reservation th√†nh OCCUPIED + t·∫°o order
     * - OCCUPIED ‚Üí Th√™m m√≥n v√†o order hi·ªán t·∫°i
     * 
     * üõ°Ô∏è Error Handling:
     * - IllegalArgumentException: L·ªói nghi·ªáp v·ª• (hi·ªÉn th·ªã cho user)
     * - RuntimeException: L·ªói h·ªá th·ªëng (log + th√¥ng b√°o generic)
     * 
     * ‚ö° Performance Notes:
     * - S·ª≠ d·ª•ng @Transactional trong service ƒë·ªÉ ƒë·∫£m b·∫£o data consistency
     * - Stream API ƒë·ªÉ filter items c√≥ quantity > 0
     * - Validation 2 l·ªõp: Framework + Business Logic
     */
    @PostMapping("/select-menu-on-sales")
    public String selectMenuOnSales(@Valid @ModelAttribute("selectMenuRequest") CreateSelectMenuRequest request,
            BindingResult bindingResult,
            Model model,
            RedirectAttributes redirectAttributes) {
        try {
            // ========================================
            // B∆Ø·ªöC 1: SPRING FRAMEWORK VALIDATION
            // ========================================
            // @Valid annotation ƒë√£ validate c√°c field theo annotation trong DTO
            // BindingResult ch·ª©a k·∫øt qu·∫£ validation

            // ========================================
            // B∆Ø·ªöC 2: BUSINESS RULES VALIDATION
            // ========================================

            // Sub-step 2.1: L·∫•y th√¥ng tin b√†n ƒë·ªÉ validate business rules
            var table = tableRepository.findById(request.getTableId())
                    .orElseThrow(
                            () -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + request.getTableId()));

            // Sub-step 2.2: Validate th√¥ng tin kh√°ch h√†ng theo tr·∫°ng th√°i b√†n
            if (table.getStatus().name().equals("AVAILABLE")) {
                // Rule: B√†n tr·ªëng b·∫Øt bu·ªôc nh·∫≠p th√¥ng tin kh√°ch h√†ng
                if (request.getCustomerName() == null || request.getCustomerName().trim().isEmpty()) {
                    bindingResult.rejectValue("customerName", "error.customerName",
                            "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng khi t·∫°o m·ªõi order");
                }
                if (request.getCustomerPhone() == null || request.getCustomerPhone().trim().isEmpty()) {
                    bindingResult.rejectValue("customerPhone", "error.customerPhone",
                            "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng khi t·∫°o m·ªõi order");
                }
            }

            // Sub-step 2.3: Validate m√≥n ƒë√£ ch·ªçn
            if (request.getItems() == null || request.getItems().isEmpty()) {
                bindingResult.reject("error.items", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√≥n");
            } else {
                // L·ªçc c√°c m√≥n c√≥ quantity > 0 (m√≥n th·ª±c s·ª± ƒë∆∞·ª£c ch·ªçn)
                var validItems = request.getItems().stream()
                        .filter(item -> item.getMenuItemId() != null && item.getQuantity() != null
                                && item.getQuantity() > 0)
                        .toList();

                if (validItems.isEmpty()) {
                    bindingResult.reject("error.items", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√≥n v√† nh·∫≠p s·ªë l∆∞·ª£ng");
                } else {
                    // C·∫≠p nh·∫≠t l·∫°i items ch·ªâ g·ªìm c√°c m√≥n h·ª£p l·ªá (performance optimization)
                    request.setItems(new ArrayList<>(validItems));
                }
            }

            // ========================================
            // B∆Ø·ªöC 3: X·ª¨ L√ù VALIDATION ERRORS
            // ========================================
            if (bindingResult.hasErrors()) {
                // Chu·∫©n b·ªã l·∫°i data cho view khi c√≥ l·ªói validation
                var tableForError = tableRepository.findById(request.getTableId()).orElse(null);

                model.addAttribute("tables", tableRepository.findAll());
                model.addAttribute("selectMenuRequest", request);
                model.addAttribute("selectedTable", tableForError);
                model.addAttribute("showSelectMenuForm", true);
                model.addAttribute("org.springframework.validation.BindingResult.selectMenuRequest", bindingResult);
                model.addAttribute("menuItems", selectMenuService.getMenuItems());

                // Tr·∫£ v·ªÅ trang sales v·ªõi form hi·ªÉn th·ªã v√† errors
                return "sales/sales";
            }

            // ========================================
            // B∆Ø·ªöC 4: L·∫§Y TH√îNG TIN NH√ÇN VI√äN T·ª™ SECURITY CONTEXT
            // ========================================
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            AccountEntity account = accountRepository.findByUsername(username)
                    .orElseThrow(() -> new IllegalArgumentException(
                            "Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n cho t√†i kho·∫£n ƒëƒÉng nh·∫≠p: " + username));
            if (account.getEmployee() == null) {
                throw new IllegalArgumentException("T√†i kho·∫£n '" + username + "' kh√¥ng li√™n k·∫øt v·ªõi nh√¢n vi√™n n√†o!");
            }
            Integer employeeId = account.getEmployee().getId();

            // ========================================
            // B∆Ø·ªöC 5: G·ªåI SERVICE TH·ª∞C HI·ªÜN BUSINESS LOGIC
            // ========================================
            // Service s·∫Ω x·ª≠ l√Ω logic theo tr·∫°ng th√°i b√†n (AVAILABLE/RESERVED/OCCUPIED)
            OrderDetailRessponse orderDetail = selectMenuService.createOrderForAvailableTable(request, employeeId);

            // ========================================
            // B∆Ø·ªöC 6: SUCCESS - HI·ªÇN TH·ªä K·∫æT QU·∫¢ TH√ÄNH C√îNG
            // ========================================
            model.addAttribute("tables", tableRepository.findAll());
            model.addAttribute("successMessage", "Ch·ªçn m√≥n th√†nh c√¥ng!");
            model.addAttribute("orderDetail", orderDetail);
            model.addAttribute("showSelectMenuForm", false); // ·∫®n form sau khi th√†nh c√¥ng
            return "sales/sales";
        } catch (IllegalArgumentException e) {
            bindingResult.rejectValue("customerName", "error.customerName", e.getMessage());
        } catch (RuntimeException e) {
            bindingResult.reject("error.system", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng: " + e.getMessage());
        }
        // Tr·∫£ l·∫°i form n·∫øu c√≥ l·ªói
        var tableForFinalError = tableRepository.findById(request.getTableId()).orElse(null);
        model.addAttribute("tables", tableRepository.findAll());
        model.addAttribute("selectMenuRequest", request);
        model.addAttribute("selectedTable", tableForFinalError);
        model.addAttribute("showSelectMenuForm", true);
        model.addAttribute("org.springframework.validation.BindingResult.selectMenuRequest", bindingResult);
        model.addAttribute("menuItems", selectMenuService.getMenuItems());
        return "sales/sales";
    }

    // ================================================================================================
    // CH·ª®C NƒÇNG 2: XEM CHI TI·∫æT B√ÄN V√Ä ORDER
    // ================================================================================================

    /**
     * üìã XEM CHI TI·∫æT ORDER C·ª¶A B√ÄN (Order Details Modal)
     * 
     * Endpoint: GET /sale/view-detail?tableId={id}
     * 
     * üéØ M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt order/invoice c·ªßa b√†n trong popup
     * 
     * üìã Quy tr√¨nh x·ª≠ l√Ω:
     * 1. Validate tableId v√† l·∫•y th√¥ng tin b√†n
     * 2. T√¨m reservation hi·ªán t·∫°i c·ªßa b√†n (n·∫øu c√≥)
     * 3. N·∫øu kh√¥ng c√≥ reservation ‚Üí hi·ªÉn th·ªã l·ªói "kh√¥ng c√≥ th√¥ng tin"
     * 4. L·∫•y invoice v√† invoice details t·ª´ reservation
     * 5. Map d·ªØ li·ªáu sang OrderDetailResponse DTO
     * 6. Hi·ªÉn th·ªã popup chi ti·∫øt trong sales.html
     * 
     * üîÑ Tr·∫°ng th√°i b√†n h·ªó tr·ª£: RESERVED, OCCUPIED
     * 
     * üìä Th√¥ng tin hi·ªÉn th·ªã:
     * - Th√¥ng tin b√†n v√† tr·∫°ng th√°i
     * - Th√¥ng tin kh√°ch h√†ng (t·ª´ reservation)
     * - Danh s√°ch m√≥n ƒë√£ order v·ªõi s·ªë l∆∞·ª£ng v√† gi√°
     * - T·ªïng ti·ªÅn c·ªßa h√≥a ƒë∆°n
     */
    @GetMapping("/view-detail")
    public String getViewDetail(@RequestParam Integer tableId, Model model) {
        // B∆Ø·ªöC 1: Validate v√† l·∫•y th√¥ng tin b√†n
        var table = tableRepository.findById(tableId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + tableId));

        // B∆Ø·ªöC 2: T√¨m reservation hi·ªán t·∫°i c·ªßa b√†n
        var reservation = reservationService.findCurrentReservationByTableId(tableId);

        // B∆Ø·ªöC 3: Ki·ªÉm tra t·ªìn t·∫°i reservation
        if (reservation == null) {
            // N·∫øu kh√¥ng c√≥ reservation (b√†n tr·ªëng), hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            model.addAttribute("tables", tableRepository.findAll());
            model.addAttribute("showOrderDetailModal", false);
            model.addAttribute("orderDetailError", "Kh√¥ng c√≥ th√¥ng tin ƒë·∫∑t b√†n/order cho b√†n n√†y!");
            return "sales/sales";
        }

        // B∆Ø·ªöC 4: L·∫•y th√¥ng tin invoice v√† invoice details
        var invoice = reservation.getInvoice();
        var invoiceDetails = invoiceDetailRepository.findAllByInvoice_IdAndIsDeletedFalse(invoice.getId());

        // B∆Ø·ªöC 5: Map entity sang response DTO ƒë·ªÉ hi·ªÉn th·ªã
        OrderDetailRessponse orderDetail = orderDetailMapper.toOrderDetailResponse(table, invoice, reservation,
                invoiceDetails);

        // B∆Ø·ªöC 6: Truy·ªÅn data cho view v√† hi·ªÉn th·ªã popup
        model.addAttribute("tables", tableRepository.findAll());
        model.addAttribute("orderDetail", orderDetail);
        model.addAttribute("showOrderDetailModal", true);
        return "sales/sales";
    }

    // ================================================================================================
    // CH·ª®C NƒÇNG 3: HI·ªÇN TH·ªä TRANG CH√çNH SALES OVERVIEW
    // ================================================================================================

    /**
     * üè† TRANG CH√çNH QU·∫¢N L√ù B√ÅN H√ÄNG V√Ä C√ÅC MODAL
     * 
     * Endpoint: GET /sale
     * 
     * üéØ M·ª•c ƒë√≠ch:
     * - Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ b√†n v·ªõi tr·∫°ng th√°i
     * - X·ª≠ l√Ω hi·ªÉn th·ªã c√°c modal (g·ªôp b√†n, t√°ch b√†n) d·ª±a tr√™n query parameters
     * 
     * üìã Query Parameters:
     * - showMergeModal: Hi·ªÉn th·ªã modal g·ªôp b√†n
     * - showSplitModal: Hi·ªÉn th·ªã modal t√°ch b√†n
     * - selectedTableId: ID b√†n ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th·ª±c hi·ªán action
     * 
     * üîÑ Logic x·ª≠ l√Ω modal:
     * 1. MERGE MODAL: L·∫•y danh s√°ch b√†n OCCUPIED ƒë·ªÉ g·ªôp
     * 2. SPLIT MODAL: Validate b√†n ngu·ªìn OCCUPIED, chu·∫©n b·ªã danh s√°ch b√†n ƒë√≠ch v√†
     * m√≥n
     * 
     * üìä Data truy·ªÅn cho view:
     * - tables: Danh s√°ch t·∫•t c·∫£ b√†n
     * - reservation: Object r·ªóng cho form ƒë·∫∑t b√†n
     * - showReservationForm: Flag hi·ªÉn th·ªã form ƒë·∫∑t b√†n
     * - C√°c data cho modal g·ªôp/t√°ch b√†n n·∫øu c√≥
     * 
     * ‚ö†Ô∏è Error Handling:
     * - Validate tr·∫°ng th√°i b√†n ngu·ªìn cho t√°ch b√†n
     * - Ki·ªÉm tra t·ªìn t·∫°i reservation v√† invoice
     * - Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt cho user
     */
    @GetMapping("")
    public String getSalesOverview(
            @RequestParam(required = false) Boolean showMergeModal,
            @RequestParam(required = false) Boolean showSplitModal,
            @RequestParam(required = false) Boolean showMoveModal,
            @RequestParam(required = false) Integer selectedTableId,
            Model model) {

        // ======================================
        // B∆Ø·ªöC 1: CHU·∫®N B·ªä DATA C∆† B·∫¢N CHO VIEW
        // ======================================
        model.addAttribute("tables", tableRepository.findAll()); // Danh s√°ch t·∫•t c·∫£ b√†n
        model.addAttribute("reservation", new CreateReservationRequest()); // Object cho form ƒë·∫∑t b√†n
        model.addAttribute("showReservationForm", false); // M·∫∑c ƒë·ªãnh kh√¥ng hi·ªÉn th·ªã form ƒë·∫∑t b√†n

        // ==========================================
        // B∆Ø·ªöC 2: X·ª¨ L√ù HI·ªÇN TH·ªä MODAL G·ªòEP B√ÄN
        // ==========================================
        if (showMergeModal != null && showMergeModal) {
            // L·∫•y danh s√°ch c√°c b√†n OCCUPIED ƒë·ªÉ hi·ªÉn th·ªã trong modal g·ªôp b√†n
            var occupiedTables = tableRepository.findAll().stream()
                    .filter(table -> table.getStatus() == TableStatus.OCCUPIED)
                    .toList();

            model.addAttribute("showMergeModal", true);
            model.addAttribute("occupiedTables", occupiedTables);
            model.addAttribute("selectedTableId", selectedTableId);
        }

        // ==========================================
        // B∆Ø·ªöC 3: X·ª¨ L√ù HI·ªÇN TH·ªä MODAL T√ÅCH B√ÄN
        // ==========================================
        if (showSplitModal != null && showSplitModal && selectedTableId != null) {
            try {
                // Sub-step 3.1: VALIDATE TH√îNG TIN B√ÄN NGU·ªíN
                var sourceTableOpt = tableRepository.findById(selectedTableId);
                if (sourceTableOpt.isEmpty()) {
                    model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y b√†n ngu·ªìn v·ªõi ID: " + selectedTableId);
                    return "sales/sales";
                }

                var sourceTable = sourceTableOpt.get();
                // Sub-step 3.2: KI·ªÇM TRA TR·∫†NG TH√ÅI B√ÄN NGU·ªíN - ch·ªâ t√°ch ƒë∆∞·ª£c t·ª´ b√†n OCCUPIED
                if (sourceTable.getStatus() != TableStatus.OCCUPIED) {
                    model.addAttribute("errorMessage",
                            "Ch·ªâ c√≥ th·ªÉ t√°ch t·ª´ b√†n ƒëang s·ª≠ d·ª•ng (OCCUPIED). B√†n hi·ªán t·∫°i: " + sourceTable.getStatus());
                    return "sales/sales";
                }

                // Sub-step 3.3: KI·ªÇM TRA RESERVATION V√Ä INVOICE C·ª¶A B√ÄN NGU·ªíN
                var sourceReservation = reservationService.findCurrentReservationByTableId(selectedTableId);
                if (sourceReservation == null) {
                    model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t b√†n cho b√†n ngu·ªìn");
                    return "sales/sales";
                }

                if (sourceReservation.getInvoice() == null) {
                    model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n cho b√†n ngu·ªìn");
                    return "sales/sales";
                }

                // Sub-step 3.4: L·∫§Y DANH S√ÅCH C√ÅC M√ìN C√ì TH·ªÇ T√ÅCH
                var invoiceDetails = invoiceDetailRepository
                        .findAllByInvoice_IdAndIsDeletedFalse(sourceReservation.getInvoice().getId());

                if (invoiceDetails.isEmpty()) {
                    model.addAttribute("errorMessage", "B√†n ngu·ªìn kh√¥ng c√≥ m√≥n n√†o ƒë·ªÉ t√°ch");
                    return "sales/sales";
                }

                // Sub-step 3.5: L·∫§Y DANH S√ÅCH B√ÄN ƒê√çCH KH·∫¢ D·ª§NG
                // B√†n tr·ªëng (AVAILABLE) - s·∫Ω t·∫°o h√≥a ƒë∆°n m·ªõi
                var availableTables = tableRepository.findAll().stream()
                        .filter(table -> table.getStatus() == TableStatus.AVAILABLE)
                        .toList();

                // B√†n ƒëang s·ª≠ d·ª•ng (OCCUPIED) tr·ª´ b√†n ngu·ªìn - s·∫Ω c·ªông d·ªìn v√†o h√≥a ƒë∆°n hi·ªán t·∫°i
                var occupiedTables = tableRepository.findAll().stream()
                        .filter(table -> table.getStatus() == TableStatus.OCCUPIED
                                && !table.getId().equals(selectedTableId))
                        .toList();

                // Sub-step 3.6: KI·ªÇM TRA C√ì B√ÄN ƒê√çCH KH·∫¢ D·ª§NG KH√îNG
                if (availableTables.isEmpty() && occupiedTables.isEmpty()) {
                    System.out.println("ERROR: No target tables available");
                    model.addAttribute("errorMessage", "Kh√¥ng c√≥ b√†n n√†o kh·∫£ d·ª•ng ƒë·ªÉ t√°ch ƒë·∫øn");
                    return "sales/sales";
                }

                // Sub-step 3.7: T·∫†O OBJECT REQUEST CHO FORM BINDING
                SplitTableRequest splitRequest = new SplitTableRequest();
                splitRequest.setSourceTableId(selectedTableId);
                splitRequest.setItems(new ArrayList<>()); // Kh·ªüi t·∫°o danh s√°ch items r·ªóng ƒë·ªÉ tr√°nh null pointer

                // Sub-step 3.8: TRUY·ªÄN D·ªÆ LI·ªÜU CHO VIEW
                model.addAttribute("showSplitModal", true);
                model.addAttribute("sourceTable", sourceTable);
                model.addAttribute("availableTables", availableTables);
                model.addAttribute("occupiedTables", occupiedTables);
                model.addAttribute("sourceInvoiceDetails", invoiceDetails);
                model.addAttribute("selectedTableId", selectedTableId);
                model.addAttribute("splitTableRequest", splitRequest);

            } catch (Exception e) {
                model.addAttribute("errorMessage", "L·ªói khi thi·∫øt l·∫≠p form t√°ch b√†n: " + e.getMessage());
                return "sales/sales";
            }
        } // ==========================================
          // B∆Ø·ªöC 4: X·ª¨ L√ù HI·ªÇN TH·ªä MODAL CHUY·ªÇN B√ÄN
          // ==========================================
        if (showMoveModal != null && showMoveModal && selectedTableId != null) {
            try {
                // Sub-step 4.1: VALIDATE TH√îNG TIN B√ÄN NGU·ªíN
                var sourceTableOpt = tableRepository.findById(selectedTableId);
                if (sourceTableOpt.isEmpty()) {
                    model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y b√†n ngu·ªìn v·ªõi ID: " + selectedTableId);
                    return "sales/sales";
                }

                var sourceTable = sourceTableOpt.get();
                // Sub-step 4.2: KI·ªÇM TRA TR·∫†NG TH√ÅI B√ÄN NGU·ªíN - ch·ªâ chuy·ªÉn ƒë∆∞·ª£c t·ª´ b√†n OCCUPIED
                if (sourceTable.getStatus() != TableStatus.OCCUPIED) {
                    model.addAttribute("errorMessage",
                            "Ch·ªâ c√≥ th·ªÉ chuy·ªÉn t·ª´ b√†n ƒëang s·ª≠ d·ª•ng (OCCUPIED). B√†n hi·ªán t·∫°i: "
                                    + sourceTable.getStatus());
                    return "sales/sales";
                }

                // Sub-step 4.3: KI·ªÇM TRA RESERVATION C·ª¶A B√ÄN NGU·ªíN
                var sourceReservation = reservationService.findCurrentReservationByTableId(selectedTableId);
                if (sourceReservation == null) {
                    model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t b√†n cho b√†n ngu·ªìn");
                    return "sales/sales";
                }

                // Sub-step 4.4: L·∫§Y DANH S√ÅCH B√ÄN ƒê√çCH KH·∫¢ D·ª§NG (ch·ªâ b√†n AVAILABLE)
                var allTables = tableRepository.findAll();
                var availableTables = allTables.stream()
                        .filter(table -> table.getStatus() == TableStatus.AVAILABLE)
                        .toList();

                if (availableTables.isEmpty()) {
                    model.addAttribute("errorMessage", "Kh√¥ng c√≥ b√†n tr·ªëng n√†o ƒë·ªÉ chuy·ªÉn ƒë·∫øn");
                    return "sales/sales";
                }

                // Sub-step 4.5: TRUY·ªÄN D·ªÆ LI·ªÜU CHO VIEW
                model.addAttribute("showMoveModal", true);
                model.addAttribute("selectedTableId", selectedTableId);
                model.addAttribute("tables", allTables);
                model.addAttribute("sourceTable", sourceTable);
                model.addAttribute("availableTables", availableTables);

                // Th√™m c√°c object m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói template
                model.addAttribute("selectMenuRequest", new CreateSelectMenuRequest());

            } catch (Exception e) {
                model.addAttribute("errorMessage", "L·ªói khi thi·∫øt l·∫≠p form chuy·ªÉn b√†n: " + e.getMessage());
                return "sales/sales";
            }
        }

        // ======================================
        // B∆Ø·ªöC 5: TH√äM C√ÅC OBJECT M·∫∂C ƒê·ªäNH CHO TEMPLATE
        // ======================================
        // ƒê·∫£m b·∫£o c√°c object n√†y lu√¥n t·ªìn t·∫°i ƒë·ªÉ tr√°nh l·ªói template
        if (!model.containsAttribute("selectMenuRequest")) {
            model.addAttribute("selectMenuRequest", new CreateSelectMenuRequest());
        }
        if (!model.containsAttribute("reservation")) {
            model.addAttribute("reservation", new CreateReservationRequest());
        }

        // ======================================
        // B∆Ø·ªöC 6: TR·∫¢ V·ªÄ VIEW SALES.HTML
        // ======================================
        return "sales/sales";
    }

    /**
     * ====== X√ÅC NH·∫¨N THANH TO√ÅN (PAY INVOICE) ======
     * Endpoint: POST /sale/pay-invoice
     * Nh·∫≠n v√†o tableId, c·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n, reservation, b√†n khi thanh
     * to√°n.
     * Kh√¥ng l∆∞u s·ªë ti·ªÅn kh√°ch ƒë∆∞a/th·ªëi l·∫°i (x·ª≠ l√Ω ·ªü frontend).
     * Ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i: Invoice -> PAID, Reservation -> COMPLETED, Table ->
     * AVAILABLE.
     */
    @PostMapping("/pay-invoice")
    public String payInvoice(@RequestParam Integer tableId, Model model, RedirectAttributes redirectAttributes) {
        try {
            // 1. Validate v√† l·∫•y th√¥ng tin b√†n
            var table = tableRepository.findById(tableId)
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + tableId));

            // 2. T√¨m reservation hi·ªán t·∫°i c·ªßa b√†n
            var reservation = reservationService.findCurrentReservationByTableId(tableId);
            if (reservation == null) {
                model.addAttribute("tables", tableRepository.findAll());
                model.addAttribute("errorMessage", "Kh√¥ng c√≥ th√¥ng tin ƒë·∫∑t b√†n ƒë·ªÉ thanh to√°n!");
                return "sales/sales";
            }

            // 3. L·∫•y invoice
            var invoice = reservation.getInvoice();
            if (invoice == null) {
                model.addAttribute("tables", tableRepository.findAll());
                model.addAttribute("errorMessage", "Kh√¥ng c√≥ h√≥a ƒë∆°n ƒë·ªÉ thanh to√°n!");
                return "sales/sales";
            }

            // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i: Invoice -> PAID (enum), Table -> AVAILABLE,
            // Reservation -> x√≥a m·ªÅm
            invoice.setStatus(com.viettridao.cafe.common.InvoiceStatus.PAID); // d√πng enum ƒë√∫ng
            reservation.setIsDeleted(true); // x√≥a m·ªÅm reservation
            table.setStatus(TableStatus.AVAILABLE);

            // 5. L∆∞u l·∫°i c√°c entity
            reservationService.saveReservationAndRelated(reservation, invoice, table);

            // 6. Th√†nh c√¥ng: redirect v·ªÅ trang ch√≠nh v·ªõi th√¥ng b√°o
            redirectAttributes.addFlashAttribute("successMessage", "Thanh to√°n th√†nh c√¥ng!");
            return "redirect:/sale";
        } catch (IllegalArgumentException e) {
            model.addAttribute("errorMessage", e.getMessage());
        } catch (RuntimeException e) {
            model.addAttribute("errorMessage", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng: " + e.getMessage());
        }
        model.addAttribute("tables", tableRepository.findAll());
        return "sales/sales";
    }
    // ================================================================================================
    // CH·ª®C NƒÇNG 4: ƒê·∫∂T B√ÄN (RESERVATION)
    // ================================================================================================

    /**
     * üìã HI·ªÇN TH·ªä TRANG ƒê·∫∂T B√ÄN RI√äNG BI·ªÜT (√çt s·ª≠ d·ª•ng)
     * 
     * Endpoint: GET /sale/reservation?tableId={id}
     * 
     * üéØ M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã trang ƒë·∫∑t b√†n ri√™ng bi·ªát (kh√¥ng ph·∫£i popup)
     * 
     * üìã Quy tr√¨nh:
     * 1. T·∫°o ReservationRequest v·ªõi tableId n·∫øu c√≥
     * 2. Truy·ªÅn object cho view binding
     * 3. Tr·∫£ v·ªÅ template reservation.html
     * 
     * ‚ö†Ô∏è L∆∞u √Ω: Method n√†y √≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng, ch·ªß y·∫øu d√πng showReservationForm()
     */
    @GetMapping("/reservation")
    public String getReservationPage(
            @RequestParam(required = false) Integer tableId,
            Model model) {
        // B∆Ø·ªöC 1: T·∫°o reservation request v·ªõi tableId n·∫øu c√≥
        CreateReservationRequest reservation = new CreateReservationRequest();
        if (tableId != null) {
            reservation.setTableId(tableId);
        }

        // B∆Ø·ªöC 2: Truy·ªÅn object cho view binding
        model.addAttribute("reservation", reservation);

        // B∆Ø·ªöC 3: Tr·∫£ v·ªÅ trang ƒë·∫∑t b√†n ri√™ng bi·ªát
        return "sales/reservation";
    }

    /**
     * üéØ HI·ªÇN TH·ªä FORM ƒê·∫∂T B√ÄN TRONG POPUP (Flow ch√≠nh)
     * 
     * Endpoint: GET /sale/show-reservation-form?tableId={id}
     * 
     * üéØ M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã form ƒë·∫∑t b√†n d·∫°ng popup trong trang sales.html
     * 
     * üìã Quy tr√¨nh:
     * 1. T·∫°o ReservationRequest v·ªõi tableId ƒë∆∞·ª£c ch·ªçn
     * 2. Set flag showReservationForm = true ƒë·ªÉ hi·ªÉn th·ªã popup
     * 3. Truy·ªÅn danh s√°ch b√†n v√† form object cho view
     * 4. Tr·∫£ v·ªÅ sales.html v·ªõi popup ƒë·∫∑t b√†n hi·ªÉn th·ªã
     * 
     * üîÑ Tr·∫°ng th√°i b√†n h·ªó tr·ª£: AVAILABLE (ch·ªâ ƒë·∫∑t ƒë∆∞·ª£c b√†n tr·ªëng)
     */
    @GetMapping("/show-reservation-form")
    public String showReservationForm(@RequestParam Integer tableId, Model model) {
        // B∆Ø·ªöC 1: T·∫°o reservation request v·ªõi tableId ƒë∆∞·ª£c ch·ªçn
        CreateReservationRequest reservation = new CreateReservationRequest();
        reservation.setTableId(tableId);

        // B∆Ø·ªöC 2: Chu·∫©n b·ªã data cho view - hi·ªÉn th·ªã popup trong sales.html
        model.addAttribute("tables", tableRepository.findAll()); // Danh s√°ch t·∫•t c·∫£ b√†n
        model.addAttribute("reservation", reservation); // Form request object
        model.addAttribute("showReservationForm", true); // Flag hi·ªÉn th·ªã popup

        // B∆Ø·ªöC 3: Tr·∫£ v·ªÅ trang sales v·ªõi popup ƒë·∫∑t b√†n
        return "sales/sales";
    }

    /**
     * üíæ X·ª¨ L√ù SUBMIT FORM ƒê·∫∂T B√ÄN (Core Business Logic)
     * 
     * Endpoint: POST /sale/reservations
     * 
     * üéØ M·ª•c ƒë√≠ch: X·ª≠ l√Ω submit form ƒë·∫∑t b√†n v·ªõi validation v√† business logic
     * 
     * üìã Quy tr√¨nh x·ª≠ l√Ω:
     * 1. VALIDATION LAYER 1: Spring Framework Validation (@Valid annotation)
     * 2. SECURITY: L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ Security Context
     * 3. BUSINESS LOGIC: G·ªçi service t·∫°o ƒë·∫∑t b√†n
     * 4. SUCCESS: Redirect v·ªÅ trang ch√≠nh v·ªõi th√¥ng b√°o th√†nh c√¥ng
     * 5. ERROR: Tr·∫£ v·ªÅ form v·ªõi th√¥ng b√°o l·ªói c·ª• th·ªÉ
     * 
     * üîÑ Tr·∫°ng th√°i b√†n:
     * - AVAILABLE ‚Üí RESERVED (t·∫°o reservation + invoice r·ªóng)
     * 
     * üõ°Ô∏è Error Handling:
     * - IllegalArgumentException: L·ªói nghi·ªáp v·ª• (b√†n kh√¥ng kh·∫£ d·ª•ng, th√¥ng tin
     * kh√¥ng h·ª£p l·ªá)
     * - RuntimeException: L·ªói h·ªá th·ªëng (log + th√¥ng b√°o generic)
     * 
     * ‚ö° Performance Notes:
     * - S·ª≠ d·ª•ng @Transactional trong service ƒë·ªÉ ƒë·∫£m b·∫£o data consistency
     * - Validation nghi·ªáp v·ª•: ch·ªâ ƒë·∫∑t ƒë∆∞·ª£c b√†n AVAILABLE
     */
    @PostMapping("/reservations")
    public String createReservation(@Valid @ModelAttribute("reservation") CreateReservationRequest request,
            BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes) {

        try {
            // ========================================
            // B∆Ø·ªöC 1: SPRING FRAMEWORK VALIDATION
            // ========================================
            if (bindingResult.hasErrors()) {
                // Khi c√≥ l·ªói validate, tr·∫£ v·ªÅ sales.html v·ªõi form ƒë·∫∑t b√†n hi·ªÉn th·ªã
                model.addAttribute("tables", tableRepository.findAll());
                model.addAttribute("reservation", request);
                model.addAttribute("showReservationForm", true);
                return "sales/sales";
            }

            // ========================================
            // B∆Ø·ªöC 2: L·∫§Y TH√îNG TIN NH√ÇN VI√äN T·ª™ SECURITY CONTEXT
            // ========================================
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            AccountEntity account = accountRepository.findByUsername(username)
                    .orElseThrow(() -> new IllegalArgumentException(
                            "Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n cho t√†i kho·∫£n ƒëƒÉng nh·∫≠p: " + username));
            if (account.getEmployee() == null) {
                throw new IllegalArgumentException("T√†i kho·∫£n '" + username + "' kh√¥ng li√™n k·∫øt v·ªõi nh√¢n vi√™n n√†o!");
            }
            Integer employeeId = account.getEmployee().getId();

            // ========================================
            // B∆Ø·ªöC 3: G·ªåI SERVICE TH·ª∞C HI·ªÜN BUSINESS LOGIC
            // ========================================
            // Service s·∫Ω x·ª≠ l√Ω: validate b√†n AVAILABLE, t·∫°o reservation, t·∫°o invoice r·ªóng,
            // c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n
            reservationService.createReservation(request, employeeId);

            // ========================================
            // B∆Ø·ªöC 4: SUCCESS - REDIRECT V·ªöI TH√îNG B√ÅO TH√ÄNH C√îNG
            // ========================================
            redirectAttributes.addFlashAttribute("success", "ƒê·∫∑t b√†n th√†nh c√¥ng!");
            return "redirect:/sale";

        } catch (IllegalArgumentException e) {
            // L·ªói nghi·ªáp v·ª• t·ª´ service layer
            bindingResult.rejectValue("customerName", "error.customerName", e.getMessage());
        } catch (RuntimeException e) {
            // L·ªói h·ªá th·ªëng kh√¥ng mong mu·ªën
            bindingResult.reject("error.system", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng: " + e.getMessage());
        }

        // ========================================
        // B∆Ø·ªöC 5: ERROR - TR·∫¢ V·ªÄ FORM V·ªöI L·ªñI
        // ========================================
        // Khi c√≥ exception, tr·∫£ v·ªÅ sales.html v·ªõi form ƒë·∫∑t b√†n hi·ªÉn th·ªã v√† l·ªói
        model.addAttribute("tables", tableRepository.findAll());
        model.addAttribute("reservation", request);
        model.addAttribute("showReservationForm", true);
        return "sales/sales";
    }

    // ================================================================================================
    // CH·ª®C NƒÇNG 5: H·ª¶Y B√ÄN (CANCEL RESERVATION)
    // ================================================================================================

    /**
     * üéØ HI·ªÇN TH·ªä FORM X√ÅC NH·∫¨N H·ª¶Y B√ÄN
     * 
     * Endpoint: GET /sale/show-cancel-reservation-form?tableId={id}
     * 
     * üéØ M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã form x√°c nh·∫≠n h·ªßy b√†n trong popup
     * 
     * üìã Quy tr√¨nh:
     * 1. Validate tableId v√† l·∫•y th√¥ng tin b√†n
     * 2. T√¨m reservation hi·ªán t·∫°i c·ªßa b√†n
     * 3. Validate business rules: ch·ªâ h·ªßy ƒë∆∞·ª£c b√†n RESERVED
     * 4. Hi·ªÉn th·ªã form x√°c nh·∫≠n h·ªßy b√†n trong popup
     * 
     * üîÑ Tr·∫°ng th√°i b√†n h·ªó tr·ª£: RESERVED (ch·ªâ h·ªßy ƒë∆∞·ª£c b√†n ƒë√£ ƒë·∫∑t nh∆∞ng ch∆∞a ch·ªçn
     * m√≥n)
     * 
     * üõ°Ô∏è Business Rules:
     * - Kh√¥ng th·ªÉ h·ªßy b√†n AVAILABLE (ch∆∞a ƒë·∫∑t)
     * - Kh√¥ng th·ªÉ h·ªßy b√†n OCCUPIED (ƒë√£ ch·ªçn m√≥n)
     * - Ch·ªâ h·ªßy ƒë∆∞·ª£c reservation ch∆∞a b·ªã soft delete
     */
    @GetMapping("/show-cancel-reservation-form")
    public String showCancelReservationForm(@RequestParam Integer tableId, Model model) {
        // B∆Ø·ªöC 1: Validate v√† l·∫•y th√¥ng tin b√†n
        var table = tableRepository.findById(tableId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + tableId));

        // B∆Ø·ªöC 2: Ki·ªÉm tra b√†n c√≥ reservation kh√¥ng
        var reservation = reservationService.findCurrentReservationByTableId(tableId);
        if (reservation == null || Boolean.TRUE.equals(reservation.getIsDeleted())) {
            model.addAttribute("tables", tableRepository.findAll());
            model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t b√†n ƒë·ªÉ h·ªßy!");
            return "sales/sales";
        }

        // B∆Ø·ªöC 3: Validate business rules - ch·ªâ cho ph√©p h·ªßy khi b√†n ƒëang RESERVED
        if (!"RESERVED".equals(reservation.getTable().getStatus().name())) {
            model.addAttribute("tables", tableRepository.findAll());
            model.addAttribute("errorMessage", "Ch·ªâ c√≥ th·ªÉ h·ªßy b√†n ·ªü tr·∫°ng th√°i ƒê√É ƒê·∫∂T (RESERVED)!");
            return "sales/sales";
        }

        // B∆Ø·ªöC 4: Truy·ªÅn th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã form x√°c nh·∫≠n h·ªßy b√†n
        model.addAttribute("tables", tableRepository.findAll());
        model.addAttribute("selectedTable", table);
        model.addAttribute("reservation", reservation);
        model.addAttribute("showCancelReservationForm", true);
        return "sales/sales";
    }

    /**
     * X·ª≠ l√Ω x√°c nh·∫≠n h·ªßy b√†n (x√≥a m·ªÅm reservation, invoice, invoice detail, c·∫≠p
     * nh·∫≠t tr·∫°ng th√°i b√†n)
     */
    @PostMapping("/cancel-reservation")
    public String cancelReservation(@RequestParam Integer tableId, Model model) {
        // L·∫•y reservation hi·ªán t·∫°i (ch·ªâ l·∫•y reservation ch∆∞a b·ªã x√≥a m·ªÅm, tr·∫°ng th√°i
        // RESERVED)
        var reservation = reservationService.findCurrentReservationByTableId(tableId);
        if (reservation == null || Boolean.TRUE.equals(reservation.getIsDeleted())) {
            model.addAttribute("tables", tableRepository.findAll());
            model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t b√†n ƒë·ªÉ h·ªßy!");
            model.addAttribute("hideCancelModal", true);
            return "sales/sales";
        }
        // Ch·ªâ cho ph√©p h·ªßy khi b√†n ƒëang RESERVED
        if (!"RESERVED".equals(reservation.getTable().getStatus().name())) {
            model.addAttribute("tables", tableRepository.findAll());
            model.addAttribute("errorMessage", "Ch·ªâ c√≥ th·ªÉ h·ªßy b√†n ·ªü tr·∫°ng th√°i ƒê√É ƒê·∫∂T!");
            model.addAttribute("hideCancelModal", true);
            return "sales/sales";
        }
        // ƒê·∫∑t isDeleted = true cho reservation
        reservation.setIsDeleted(true);
        // ƒê·∫∑t isDeleted = true cho invoice
        var invoice = reservation.getInvoice();
        if (invoice != null) {
            invoice.setIsDeleted(true);
            // ƒê·∫∑t isDeleted = true cho t·∫•t c·∫£ invoice detail li√™n quan
            if (invoice.getId() != null) {
                var invoiceDetails = invoiceDetailRepository.findAllByInvoice_IdAndIsDeletedFalse(invoice.getId());
                for (var detail : invoiceDetails) {
                    detail.setIsDeleted(true);
                }
                invoiceDetailRepository.saveAll(invoiceDetails);
            }
        }
        // ƒê·∫∑t tr·∫°ng th√°i b√†n v·ªÅ AVAILABLE
        var table = reservation.getTable();
        table.setStatus(TableStatus.AVAILABLE);
        // L∆∞u l·∫°i c√°c entity
        reservationService.saveReservationAndRelated(reservation, invoice, table);
        model.addAttribute("tables", tableRepository.findAll());
        model.addAttribute("successMessage", "H·ªßy b√†n th√†nh c√¥ng!");
        model.addAttribute("hideCancelModal", true); // JS s·∫Ω d√πng bi·∫øn n√†y ƒë·ªÉ ·∫©n modal
        return "sales/sales";
    }

    /**
     * X·ª≠ l√Ω g·ªôp b√†n (merge tables) - POST
     */
    @PostMapping("/merge-tables")
    public String mergeTables(@Valid @ModelAttribute("mergeTableRequest") MergeTableRequest request,
            BindingResult bindingResult,
            Model model,
            RedirectAttributes redirectAttributes) {
        try {
            // Validate DTO
            if (bindingResult.hasErrors()) {
                var occupiedTables = tableRepository.findAll().stream()
                        .filter(table -> table.getStatus() == TableStatus.OCCUPIED)
                        .toList();
                model.addAttribute("tables", tableRepository.findAll());
                model.addAttribute("mergeTableRequest", request);
                model.addAttribute("showMergeModal", true);
                model.addAttribute("occupiedTables", occupiedTables);
                model.addAttribute("org.springframework.validation.BindingResult.mergeTableRequest", bindingResult);
                return "sales/sales";
            }
            // L·∫•y employeeId t·ª´ session
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            AccountEntity account = accountRepository.findByUsername(username)
                    .orElseThrow(() -> new IllegalArgumentException(
                            "Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n cho t√†i kho·∫£n ƒëƒÉng nh·∫≠p!"));
            if (account.getEmployee() == null) {
                throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n cho t√†i kho·∫£n ƒëƒÉng nh·∫≠p!");
            }
            Integer employeeId = account.getEmployee().getId();
            // G·ªçi service g·ªôp b√†n
            reservationService.mergeTables(request, employeeId);
            // Th√†nh c√¥ng
            redirectAttributes.addFlashAttribute("successMessage", "G·ªôp b√†n th√†nh c√¥ng!");
            return "redirect:/sale";
        } catch (IllegalArgumentException e) {
            model.addAttribute("errorMessage", e.getMessage());
        } catch (RuntimeException e) {
            model.addAttribute("errorMessage", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng: " + e.getMessage());
        }
        // Tr·∫£ l·∫°i form n·∫øu c√≥ l·ªói
        var occupiedTables = tableRepository.findAll().stream()
                .filter(table -> table.getStatus() == TableStatus.OCCUPIED)
                .toList();
        model.addAttribute("tables", tableRepository.findAll());
        model.addAttribute("mergeTableRequest", request);
        model.addAttribute("showMergeModal", true);
        model.addAttribute("occupiedTables", occupiedTables);
        model.addAttribute("org.springframework.validation.BindingResult.mergeTableRequest", bindingResult);
        return "sales/sales";
    }

    /**
     * ====== X·ª¨ L√ù T√ÅCH B√ÄN (POST METHOD) ======
     * 
     * Logic t√°ch b√†n:
     * 1. Validate input t·ª´ form (Spring Validation + Business Logic)
     * 2. L·∫•y th√¥ng tin nh√¢n vi√™n th·ª±c hi·ªán
     * 3. G·ªçi service th·ª±c hi·ªán nghi·ªáp v·ª• t√°ch b√†n
     * 4. Redirect v·ªÅ trang ch√≠nh n·∫øu th√†nh c√¥ng
     * 5. Tr·∫£ v·ªÅ form v·ªõi l·ªói n·∫øu th·∫•t b·∫°i
     */
    @PostMapping("/split-table")
    public String splitTable(@Valid @ModelAttribute SplitTableRequest request,
            BindingResult bindingResult,
            Model model,
            RedirectAttributes redirectAttributes) {

        try {
            // ====== 1. VALIDATE C∆† B·∫¢N V√Ä SPRING VALIDATION ======
            if (bindingResult.hasErrors()) {

                // Chu·∫©n b·ªã l·∫°i d·ªØ li·ªáu cho view khi c√≥ l·ªói validation
                return setupSplitModalOnError(request, model, bindingResult, "L·ªói validation d·ªØ li·ªáu ƒë·∫ßu v√†o");
            }

            // ====== 2. VALIDATE NGHI·ªÜP V·ª§ B·ªî SUNG ======
            // Ki·ªÉm tra c√≥ ch·ªçn m√≥n n√†o kh√¥ng
            if (request.getItems() == null || request.getItems().isEmpty()) {
                return setupSplitModalOnError(request, model, bindingResult, "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√≥n ƒë·ªÉ t√°ch");
            }

            // L·ªçc c√°c m√≥n c√≥ s·ªë l∆∞·ª£ng h·ª£p l·ªá (> 0)
            var validItems = request.getItems().stream()
                    .filter(item -> item.getMenuItemId() != null && item.getQuantity() != null
                            && item.getQuantity() > 0)
                    .toList();

            if (validItems.isEmpty()) {
                return setupSplitModalOnError(request, model, bindingResult,
                        "Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá cho c√°c m√≥n ƒë∆∞·ª£c ch·ªçn");
            }

            // C·∫≠p nh·∫≠t l·∫°i items ch·ªâ g·ªìm c√°c m√≥n h·ª£p l·ªá
            request.setItems(new ArrayList<>(validItems));

            // ====== 3. L·∫§Y TH√îNG TIN NH√ÇN VI√äN TH·ª∞C HI·ªÜN ======
            Integer employeeId = getCurrentEmployeeId();

            // ====== 4. G·ªåI SERVICE TH·ª∞C HI·ªÜN T√ÅCH B√ÄN ======
            System.out.println("Calling reservation service to split table...");
            reservationService.splitTable(request, employeeId);

            // ====== 5. TH√ÄNH C√îNG - REDIRECT V·ªÄ TRANG CH√çNH ======
            System.out.println("Split table completed successfully");
            redirectAttributes.addFlashAttribute("successMessage",
                    "T√°ch b√†n th√†nh c√¥ng! ƒê√£ chuy·ªÉn " + validItems.size() + " m√≥n t·ª´ b√†n ngu·ªìn sang b√†n ƒë√≠ch.");
            return "redirect:/sale";

        } catch (IllegalArgumentException e) {
            // L·ªói nghi·ªáp v·ª• t·ª´ service layer
            return setupSplitModalOnError(request, model, bindingResult, e.getMessage());

        } catch (RuntimeException e) {
            // L·ªói h·ªá th·ªëng kh√¥ng mong mu·ªën
            return setupSplitModalOnError(request, model, bindingResult,
                    "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng: " + e.getMessage());
        }
    }

    /**
     * ====== HELPER METHOD: THI·∫æT L·∫¨P L·∫†I MODAL T√ÅCH B√ÄN KHI C√ì L·ªñI ======
     * 
     * Method n√†y ƒë∆∞·ª£c g·ªçi khi c√≥ l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω t√°ch b√†n
     * ƒë·ªÉ chu·∫©n b·ªã l·∫°i to√†n b·ªô d·ªØ li·ªáu c·∫ßn thi·∫øt cho view hi·ªÉn th·ªã form
     */
    private String setupSplitModalOnError(SplitTableRequest request, Model model,
            BindingResult bindingResult, String errorMessage) {

        try {
            // L·∫•y t·∫•t c·∫£ b√†n
            var allTables = tableRepository.findAll();

            // L·ªçc b√†n tr·ªëng (AVAILABLE)
            var availableTables = allTables.stream()
                    .filter(table -> table.getStatus() == TableStatus.AVAILABLE)
                    .toList();

            // L·ªçc b√†n ƒëang s·ª≠ d·ª•ng (OCCUPIED) tr·ª´ b√†n ngu·ªìn
            var occupiedTables = allTables.stream()
                    .filter(table -> table.getStatus() == TableStatus.OCCUPIED
                            && !table.getId().equals(request.getSourceTableId()))
                    .toList();

            // L·∫•y th√¥ng tin b√†n ngu·ªìn
            var sourceTable = tableRepository.findById(request.getSourceTableId()).orElse(null);

            // L·∫•y th√¥ng tin reservation v√† invoice details c·ªßa b√†n ngu·ªìn
            var sourceReservation = reservationService.findCurrentReservationByTableId(request.getSourceTableId());
            List<com.viettridao.cafe.model.InvoiceDetailEntity> invoiceDetails = new ArrayList<>();
            if (sourceReservation != null && sourceReservation.getInvoice() != null) {
                invoiceDetails = invoiceDetailRepository
                        .findAllByInvoice_IdAndIsDeletedFalse(sourceReservation.getInvoice().getId());
            }

            // Truy·ªÅn t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt cho view
            model.addAttribute("tables", allTables);
            model.addAttribute("splitTableRequest", request);
            model.addAttribute("showSplitModal", true);
            model.addAttribute("sourceTable", sourceTable);
            model.addAttribute("availableTables", availableTables);
            model.addAttribute("occupiedTables", occupiedTables);
            model.addAttribute("sourceInvoiceDetails", invoiceDetails);
            model.addAttribute("selectedTableId", request.getSourceTableId());
            model.addAttribute("errorMessage", errorMessage);
            model.addAttribute("org.springframework.validation.BindingResult.splitTableRequest", bindingResult);

            return "sales/sales";

        } catch (Exception e) {
            model.addAttribute("tables", tableRepository.findAll());
            model.addAttribute("errorMessage", "L·ªói h·ªá th·ªëng khi hi·ªÉn th·ªã form: " + e.getMessage());
            return "sales/sales";
        }
    }

    /**
     * ====== X·ª¨ L√ù CHUY·ªÇN B√ÄN (MOVE TABLE) ======
     * Endpoint: POST /sale/move-table
     * Ch·ªâ cho ph√©p chuy·ªÉn t·ª´ b√†n OCCUPIED sang b√†n AVAILABLE.
     * Copy to√†n b·ªô reservation, invoice, invoice details t·ª´ b√†n ngu·ªìn sang b√†n
     * ƒë√≠ch.
     * ƒê·ªïi tr·∫°ng th√°i b√†n ƒë√≠ch th√†nh OCCUPIED, b√†n ngu·ªìn th√†nh AVAILABLE.
     * X√≥a m·ªÅm reservation ·ªü b√†n ngu·ªìn ho·∫∑c c·∫≠p nh·∫≠t l·∫°i cho ƒë√∫ng.
     */
    @PostMapping("/move-table")
    public String moveTable(
            @RequestParam(required = false) Integer sourceTableId,
            @RequestParam(required = false) Integer targetTableId,
            Model model,
            RedirectAttributes redirectAttributes) {
        try {
            // Validate input c∆° b·∫£n
            if (sourceTableId == null) {
                model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y b√†n ngu·ªìn");
                model.addAttribute("tables", tableRepository.findAll());
                model.addAttribute("showMoveModal", true);
                model.addAttribute("selectedTableId", sourceTableId);
                model.addAttribute("reservation", new CreateReservationRequest());
                model.addAttribute("selectMenuRequest", new CreateSelectMenuRequest());
                return "sales/sales";
            }

            if (targetTableId == null) {
                model.addAttribute("errorMessage", "Vui l√≤ng ch·ªçn b√†n ƒë√≠ch");
                model.addAttribute("tables", tableRepository.findAll());
                model.addAttribute("showMoveModal", true);
                model.addAttribute("selectedTableId", sourceTableId);
                model.addAttribute("reservation", new CreateReservationRequest());
                model.addAttribute("selectMenuRequest", new CreateSelectMenuRequest());
                return "sales/sales";
            }

            // T·∫°o request object t·ª´ parameters
            com.viettridao.cafe.dto.request.sales.MoveTableRequest request = new com.viettridao.cafe.dto.request.sales.MoveTableRequest();
            request.setSourceTableId(sourceTableId);
            request.setTargetTableId(targetTableId);

            // L·∫•y employeeId t·ª´ session
            Integer employeeId = getCurrentEmployeeId();

            // G·ªçi service chuy·ªÉn b√†n
            reservationService.moveTable(request, employeeId);

            // Th√†nh c√¥ng
            redirectAttributes.addFlashAttribute("successMessage", "Chuy·ªÉn b√†n th√†nh c√¥ng!");
            return "redirect:/sale";
        } catch (IllegalArgumentException e) {
            model.addAttribute("errorMessage", e.getMessage());
        } catch (RuntimeException e) {
            model.addAttribute("errorMessage", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng: " + e.getMessage());
        }
        // Tr·∫£ l·∫°i form n·∫øu c√≥ l·ªói
        model.addAttribute("tables", tableRepository.findAll());
        model.addAttribute("showMoveModal", true);
        model.addAttribute("selectedTableId", sourceTableId);
        // Th√™m object m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói template
        model.addAttribute("reservation", new CreateReservationRequest());
        model.addAttribute("selectMenuRequest", new CreateSelectMenuRequest());
        return "sales/sales";
    }

    /**
     * ====== HELPER METHOD: L·∫§Y ID NH√ÇN VI√äN HI·ªÜN T·∫†I ======
     * 
     * L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ session ƒëƒÉng nh·∫≠p hi·ªán t·∫°i
     */
    private Integer getCurrentEmployeeId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        AccountEntity account = accountRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalArgumentException(
                        "Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n cho username: " + username));

        if (account.getEmployee() == null) {
            throw new IllegalArgumentException(
                    "T√†i kho·∫£n '" + username + "' kh√¥ng li√™n k·∫øt v·ªõi nh√¢n vi√™n n√†o!");
        }

        return account.getEmployee().getId();
    }

}
